
; These flashcards are from purelyfunctional.tv 

{:name       "Clojure Top 100 Reversed"
 :image-file "clojure.png"
 :type "text"
 :cards
             [
"Define a function at the top level." "defn" 
"Bind names in a local scope." "let" 
"Return true if all arguments are equal, false otherwise."  "=" 
"Assert that an expression returns truthy inside of a test." "is" 
"Two-way conditional branch." "if" 
"Create a function." "fn" 
"Define a top level Var." "def" 
"Convert the arguments to strings and concatenate them." "str" 
"Define a test." "deftest" 
"Create a seq whose elements are the result of applying a function to the elements of another seq." "map" 
"Define a namespace at the top of a file." "ns" 
"Thread-first macro." "->" 
"Define a function at the top level that is private to the namespace." "defn-" 
"Return the initial element of a seq." "first" 
"One-way conditional branch." "when" 
"Add context text to enclosed assertions." "testing" 
"Evaluate expressions in turn, returning the first that is truthy or nil otherwise." "or" 
"Call a function on a seq of arguments." "apply" 
"Add one or more key/value pairs to an associative data structure such as a hashmap or vector." "assoc" 
"Return the number of elements in the given collection." "count" 
"Evaluate expressions in turn, returning the first that is not truthy, or the last one otherwise." "and" 
"Return true if the argument is falsey, false otherwise." "not" 
"Return true if the argument is nil, false otherwise." "nil?" 
"Define a method in a multimethod." "defmethod" 
"Add all arguments numerically." "+" 
"Define a new macro." "defmacro" 
"Return the value associated with the key in an associative data structure." "get" 
"Multiply all arguments numerically." "*" 
"Multi-way conditional branch." "cond" 
"Explicit tail recursion." "recur" 
"Print out all arguments and output a new line." "println" 
"Execute all expressions and return the value of the last expression." "do" 
"Convert a value to a seq or nil if it's empty." "seq" 
"Iterate over a seq, executing the body expressions for each element." "doseq" 
"Thread last macro." "->>" 
"Raise an exception." "throw" 
"Create a Atom." "atom" 
"Starting with an initial value, apply a function to that value and successive elements of a seq." "reduce" 
"Subtract arguments numerically, or negate a number." "-" 
"Return the non-namespace part of a keyword or symbol as a string, or the argument itself if it's a string." "name" 
"Check if a value is an instance of a class or interface." "instance?" 
"Add an element to a collection." "conj" 
"Two-way conditional branch with binding of the test result." "if-let" 
"Add one to a number." "inc" 
"Replace an Atom's value with the result of applying a function to the current value." "swap!" 
"Add elements of a seq to a collection." "into" 
"Create a seq of numbers from start to end." "range" 
"Keep elements of a seq that are truthy for a given predicate." "filter" 
"Get the value from a nested associative data structure at a path." "get-in" 
"Add key/value pairs from one map into another." "merge" 
"Returns true if there are no elements in a collection, false otherwise." "empty?" 
"Create a scope for tail recursion." "loop" 
"List comprehension." "for" 
"Create a point for catching exception." "try" 
"Create a list." "list" 
"Create a string using java.lang.String.format." "format" 
"Declare what to do when a particular class of exception is caught." "catch" 
"Negative one-way conditional branch." "when-not" 
"Return a seq of elements from a collection excluding the first." "rest" 
"Mathematical less than." "<" 
"Convert a collection to a vector." "vec" 
"Take a function and arguments and make a new function that has those arguments already applied." "partial" 
"String seqs together in order." "concat" 
"Set the value of an Atom without regard to the current value." "reset!" 
"Convert a collection to a set." "set" 
"One-way conditional branch with binding of the test result." "when-let" 
"Numeric division." "/" 
"Convert a number to an integer." "int" 
"Add an element to the beginning of a seq." "cons" 
"Retrieve an element from a seq by numeric index." "nth" 
"Throw an AssertionError if expression is false." "assert" 
"Define a Leiningen project." "defproject" 
"Return the second element of a seq." "second" 
"Assert that multiple expressions are truthy in a test." "are" 
"Does a key appear in an associative data structure?" "contains?" 
"Modify a value at a path in a nested data structure by applying a function to that value." "update-in" 
"Mathematical greater than." ">" 
"Execute forms on first argument, then return it." "doto" 
"Define a new protocol." "defprotocol" 
"Execute a Java method." "." 
"Return the metadata on a value." "meta" 
"Numeric equality comparison (type-independent)." "==" 
"Return a seq of keys from a hash map." "keys" 
"Return a seq of elements from a collection excluding the first, or nil if it's empty." "next" 
"Return true if the argument is a map, false otherwise." "map?" 
"Return true if the argument is a string, false otherwise." "string?" 
"Set thread-local vars, Java object instance fields, and Java class static fields." "set!" 
"Return the value of an array at an index." "aget" 
"Create a keyword from a string or a namespace and name." "keyword" 
"Two-way negative conditional branch." "if-not" 
"Create a symbol from a string or a namespace and name." "symbol" 
"Create thread-local bindings for dynamic vars." "binding" 
"Subtract one from a number." "dec" 
"Remove a key/value from an associative data structure." "dissoc" 
"Create a new record type." "defrecord" 
"Compose two or more functions." "comp" 
"Return true if the arguments are not equal, false otherwise." "not=" 
"A special form in clojure.test/is expressions to check if an exception is thrown." "thrown?" 
"Convert a number to a Java float." "float" 
"Return a new set keeping only elements that are truthy for a given predicate" "select" 
              ]
 }
